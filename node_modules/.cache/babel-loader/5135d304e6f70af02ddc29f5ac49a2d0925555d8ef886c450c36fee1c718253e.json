{"ast":null,"code":"var _jsxFileName = \"/Users/hyejincho/Developer/Projects/ToDoList/src/components/Todo/TodoWrapper.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Todo } from './Todo';\nimport { TodoForm } from './TodoForm';\nimport { Search } from './Search';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { TaskModal } from '../Task/TaskModal';\nimport { EditTaskModal } from '../Task/EditTaskModal';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const TodoWrapper = () => {\n  _s();\n  const [todos, setTodos] = useState([]);\n  const [filteredTasks, setFilteredTasks] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isTaskModalOpen, setIsTaskModalOpen] = useState(false);\n  const [isEditTaskModalOpen, setIsEditTaskModalOpen] = useState(false);\n  const [activeFilter, setActiveFilter] = useState(true);\n  const addTask = newTask => {\n    // setTodos([...todos, newTask])\n    setTodos(prevTodos => [...prevTodos, newTask]);\n  };\n  useEffect(() => {\n    if (isTaskModalOpen && isEditTaskModalOpen) {\n      setIsEditTaskModalOpen(false);\n    }\n  }, [isTaskModalOpen]);\n  useEffect(() => {\n    if (isEditTaskModalOpen && isTaskModalOpen) {\n      setIsTaskModalOpen(false);\n    }\n  }, [isEditTaskModalOpen]);\n  const openTaskModal = () => {\n    setIsTaskModalOpen(true);\n    setIsEditTaskModalOpen(false);\n  };\n  const closeTaskModal = () => {\n    setIsTaskModalOpen(false);\n  };\n  const openEditTaskModal = () => {\n    setIsEditTaskModalOpen(true);\n  };\n  const closeEditTaskModal = () => {\n    setIsEditTaskModalOpen(false);\n  };\n\n  // 할 일을 서버에서 가져오는 함수\n  const fetchTasks = async () => {\n    try {\n      const response = await axios.get('http://localhost:3001/tasks');\n      const tasks = response.data;\n      console.log(tasks);\n      setTodos(tasks);\n      filterTasks(tasks, selectedCategory, searchTerm);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  // const addTask = async (newTask) => {\n  //     try {\n  //         const response = await axios.post('http://localhost:3001/tasks', {\n  //             task: newTask.task,\n  //             category: newTask.category,\n  //             note: newTask.note,  \n  //             image: newTask.image,\n  //             dueDate: newTask.dueDate,\n  //             url: newTask.url,    \n  //             isCompleted: false  \n  //         });          \n  //         const newTodos = [...todos, response.data];  \n  //         setTodos(newTodos);\n  //         filterTasks(newTodos, selectedCategory, searchTerm);\n  //     } catch (error) {\n  //         console.error('Error adding task:', error);\n  //     }\n  // };\n  // const addTodo = async (todo) => {\n  //     try {\n  //         const response = await axios.post('http://localhost:3001/tasks', {\n  //             task: todo,\n  //             category: 'all',\n  //             // completed: false,\n  //             // isEditing: false\n  //         });\n  //         const newTodos = [...todos, response.data];\n  //         // setTodos([...todos, response.data]);\n  //         setTodos(newTodos)\n  //         setFilteredTasks(newTodos)\n  //         filterTasks(newTodos, selectedCategory, searchTerm)\n  //         console.log('New task added:', response.data);\n  //     } catch (error) {\n  //         console.error('Error adding task:', error);\n  //     }\n  // };\n\n  const deleteTodo = async id => {\n    try {\n      await axios.delete(`http://localhost:3001/tasks/${id}`);\n      const updatedTodos = todos.filter(todo => todo.id !== id);\n      setTodos(updatedTodos);\n      filterTasks(updatedTodos, selectedCategory, searchTerm);\n      console.log('Task deleted:', id);\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n  const toggleComplete = async id => {\n    try {\n      const updatedTodo = todos.find(todo => todo.id === id);\n      const updatedData = {\n        isCompleted: !updatedTodo.isCompleted\n      };\n      await axios.patch(`http://localhost:3001/tasks/${id}`, updatedData);\n      const updatedTodos = todos.map(todo => todo.id === id ? {\n        ...todo,\n        isCompleted: !todo.isCompleted\n      } : todo);\n      setTodos(updatedTodos);\n      filterTasks(updatedTodos, selectedCategory, searchTerm);\n      console.log(\"Task complete status updated:\", id);\n    } catch (error) {\n      console.error('Error updating task complete status:', error);\n    }\n  };\n  const editTodo = async (id, updatedTask) => {\n    try {\n      // const updatedTodo = todos.find(todo => todo.id === id);\n      const updatedData = {\n        task: updatedTask,\n        isEditing: false\n      };\n      await axios.patch(`http://localhost:3001/tasks/${id}`, updatedData);\n      // const updatedTodos = todos.map(todo =>\n      //     todo.id === id ? { ...todo, isEditing: !todo.isEditing } : todo\n      // );\n      const updatedTodos = todos.map(todo => todo.id === id ? {\n        ...todo,\n        task: updatedTask\n      } : todo);\n      setTodos(updatedTodos);\n      filterTasks(updatedTodos, selectedCategory, searchTerm);\n      console.log(\"Task is updated:\", id);\n    } catch (error) {\n      console.error('Error updating task', error);\n    }\n  };\n\n  // const filterTasks = (tasks, category, searchTerm) => {\n  //     let filtered = tasks;\n  //     if(category !== 'all') {\n  //         setFilteredTasks(tasks);\n  //     } else {\n  //         const filtered = tasks.filter(todo => todo.category === category);\n  //         setFilteredTasks(filtered)\n  //     }\n  // }\n\n  // const filterTasks = (tasks, category, searchTerm) => {\n  //     let filtered = tasks;\n  //     if (category !== 'all') {\n  //         filtered = filtered.filter((todo) => todo.category === category);\n  //     }\n  //     if (searchTerm.trim() !== '') {\n  //         filtered = filtered.filter((todo)=> todo.task.toLowerCase().includes(searchTerm.toLowerCase()));\n  //     }\n  //     filtered = filtered.sort((a,b) => a.isCompleted - b.isCompleted);\n  //     setFilteredTasks(filtered);\n  // }\n\n  const filterTasks = (tasks, category, searchTerm) => {\n    let filtered = tasks;\n    if (category !== 'Completed') {\n      filtered = filtered.filter(todo => todo.isCompleted);\n    } else if (category === 'Incompleted') {\n      filtered = filtered.filter(todo => !todo.isCompleted);\n    }\n    if (searchTerm.trim() !== '') {\n      filtered = filtered.filter(todo => todo.task.toLowerCase().includes(searchTerm.toLowerCase()));\n    }\n    filtered = filtered.sort((a, b) => a.isCompleted - b.isCompleted);\n    setFilteredTasks(filtered);\n  };\n  const handleCategoryChange = category => {\n    setSelectedCategory(category);\n    filterTasks(todos, category, searchTerm);\n  };\n\n  // const filterCompletedTasks = (isCompleted) => {\n  //     return todos.filter(task => task.isCompleted === isCompleted);\n  // }\n\n  // const incompleteTasks = filterCompletedTasks(false);\n  // const completeTasks = filterCompletedTasks(true);\n\n  // useEffect(() => {\n  //     fetchTasks();\n  // }, [addTodo, filterTasks]); \n\n  // const handleSearch = (searchTerm) => {\n  //     if(!searchTerm.trim() === '') {\n  //         setFilteredTasks(todos);\n  //     } else {\n  //         const filtered = todos.filter((todo) => todo.task.toLowerCase().includes(searchTerm.toLowerCase()));\n  //         setFilteredTasks(filtered);\n  //     }\n  // }\n\n  const handleSearch = term => {\n    setSearchTerm(term);\n    filterTasks(todos, selectedCategory, term);\n  };\n\n  // const handleActiveFilterClick = () => {\n  //     setActiveFilter(true);\n  //     filterTasks(incompleteTasks, selectedCategory, searchTerm, true)\n  // };\n\n  // const handleDoneFilterClick = () => {\n  //     setActiveFilter(false);\n  //     filterTasks(completeTasks, selectedCategory, searchTerm, false)\n  // };\n\n  const countCompletedTasks = todos => {\n    const completedTasks = todos.filter(task => task.isCompleted === true);\n    // console.log(completedTasks);\n    return completedTasks.length;\n  };\n  const countIncompleteTasks = todos => {\n    const incompleteTasks = todos.filter(task => task.isCompleted === false);\n    // console.log(incompleteTasks);\n    return incompleteTasks.length;\n  };\n  const completedCount = countCompletedTasks(todos);\n  const incompleteCount = countIncompleteTasks(todos);\n  console.log('Completed tasks:', completedCount);\n  console.log('Incomplete tasks:', incompleteCount);\n\n  // addTodo={addTodo} \n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"TodoWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"titleContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"title\",\n          children: \"To Do List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"todo-btn\",\n          onClick: openTaskModal,\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faPlus,\n            size: \"2xl\",\n            style: {\n              color: \"#524444\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 84\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"filterContainer\",\n        children: [/*#__PURE__*/_jsxDEV(Search, {\n          handleSearch: handleSearch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"select-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"categoryFilter\",\n            className: \"category-filter\",\n            value: selectedCategory,\n            setSearchTerm: setSearchTerm,\n            onChange: e => handleCategoryChange(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"incompleted\",\n              children: \"Incompleted\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"completed\",\n              children: \"Completed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"todoContainer\",\n        children: [filteredTasks.map(task => /*#__PURE__*/_jsxDEV(Todo, {\n          task: task,\n          toggleComplete: toggleComplete,\n          deleteTodo: deleteTodo,\n          editTodo: editTodo,\n          searchTerm: searchTerm\n        }, task.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 21\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"taskCountBox\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            id: \"incompletedCount\",\n            children: [incompleteCount, \" tasks left\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            id: \"completedCount\",\n            children: [completedCount, \" tasks completed\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 9\n    }, this), isTaskModalOpen && /*#__PURE__*/_jsxDEV(TaskModal, {\n      addTask: addTask,\n      closeModal: closeTaskModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 29\n    }, this), isEditTaskModalOpen && /*#__PURE__*/_jsxDEV(EditTaskModal, {\n      addTask: addTask,\n      closeModal: closeEditTaskModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true);\n};\n_s(TodoWrapper, \"pzxU40YhWYkiDDWCnh1gayesJ0A=\");\n_c = TodoWrapper;\nvar _c;\n$RefreshReg$(_c, \"TodoWrapper\");","map":{"version":3,"names":["React","useState","useEffect","axios","Todo","TodoForm","Search","FontAwesomeIcon","faPlus","TaskModal","EditTaskModal","jsxDEV","_jsxDEV","Fragment","_Fragment","TodoWrapper","_s","todos","setTodos","filteredTasks","setFilteredTasks","selectedCategory","setSelectedCategory","searchTerm","setSearchTerm","isTaskModalOpen","setIsTaskModalOpen","isEditTaskModalOpen","setIsEditTaskModalOpen","activeFilter","setActiveFilter","addTask","newTask","prevTodos","openTaskModal","closeTaskModal","openEditTaskModal","closeEditTaskModal","fetchTasks","response","get","tasks","data","console","log","filterTasks","error","deleteTodo","id","delete","updatedTodos","filter","todo","toggleComplete","updatedTodo","find","updatedData","isCompleted","patch","map","editTodo","updatedTask","task","isEditing","category","filtered","trim","toLowerCase","includes","sort","a","b","handleCategoryChange","handleSearch","term","countCompletedTasks","completedTasks","length","countIncompleteTasks","incompleteTasks","completedCount","incompleteCount","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","icon","size","style","color","class","value","onChange","e","target","closeModal","_c","$RefreshReg$"],"sources":["/Users/hyejincho/Developer/Projects/ToDoList/src/components/Todo/TodoWrapper.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Todo } from './Todo';\nimport { TodoForm } from './TodoForm';\nimport { Search } from './Search';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { TaskModal } from '../Task/TaskModal';\nimport { EditTaskModal } from '../Task/EditTaskModal';\n\nexport const TodoWrapper = () => {\n    const [todos, setTodos] = useState([]);\n    const [filteredTasks, setFilteredTasks] = useState([]);\n    const [selectedCategory, setSelectedCategory] = useState('all');\n    const [searchTerm, setSearchTerm] = useState('');\n    const [isTaskModalOpen, setIsTaskModalOpen] = useState(false);\n    const [isEditTaskModalOpen, setIsEditTaskModalOpen] = useState(false);\n    const [activeFilter, setActiveFilter] = useState(true);\n\n    const addTask = (newTask) => {\n        // setTodos([...todos, newTask])\n        setTodos((prevTodos) => [...prevTodos, newTask]);\n    }\n\n    useEffect(() => {\n        if (isTaskModalOpen && isEditTaskModalOpen) {\n            setIsEditTaskModalOpen(false);\n        }\n    }, [isTaskModalOpen]);\n\n    useEffect(() => {\n        if (isEditTaskModalOpen && isTaskModalOpen) {\n            setIsTaskModalOpen(false);\n        }\n    }, [isEditTaskModalOpen]);\n\n\n    const openTaskModal = () => {\n        setIsTaskModalOpen(true);\n        setIsEditTaskModalOpen(false);\n    };\n\n    const closeTaskModal = () => {\n        setIsTaskModalOpen(false);\n    };\n\n    const openEditTaskModal = () => {\n        setIsEditTaskModalOpen(true);\n    };\n\n    const closeEditTaskModal = () => {\n        setIsEditTaskModalOpen(false);\n    };\n\n    // 할 일을 서버에서 가져오는 함수\n    const fetchTasks = async () => {\n        try {\n            const response = await axios.get('http://localhost:3001/tasks');\n            const tasks = response.data;\n            console.log(tasks)\n            setTodos(tasks);\n            filterTasks(tasks, selectedCategory, searchTerm);\n        } catch (error) {\n            console.error('Error fetching tasks:', error);\n        }\n    };\n\n    useEffect(() => {\n        fetchTasks();\n    }, []);\n\n    // const addTask = async (newTask) => {\n    //     try {\n    //         const response = await axios.post('http://localhost:3001/tasks', {\n    //             task: newTask.task,\n    //             category: newTask.category,\n    //             note: newTask.note,  \n    //             image: newTask.image,\n    //             dueDate: newTask.dueDate,\n    //             url: newTask.url,    \n    //             isCompleted: false  \n    //         });          \n    //         const newTodos = [...todos, response.data];  \n    //         setTodos(newTodos);\n    //         filterTasks(newTodos, selectedCategory, searchTerm);\n    //     } catch (error) {\n    //         console.error('Error adding task:', error);\n    //     }\n    // };\n    // const addTodo = async (todo) => {\n    //     try {\n    //         const response = await axios.post('http://localhost:3001/tasks', {\n    //             task: todo,\n    //             category: 'all',\n    //             // completed: false,\n    //             // isEditing: false\n    //         });\n    //         const newTodos = [...todos, response.data];\n    //         // setTodos([...todos, response.data]);\n    //         setTodos(newTodos)\n    //         setFilteredTasks(newTodos)\n    //         filterTasks(newTodos, selectedCategory, searchTerm)\n    //         console.log('New task added:', response.data);\n    //     } catch (error) {\n    //         console.error('Error adding task:', error);\n    //     }\n    // };\n\n    const deleteTodo = async (id) => {\n        try {\n            await axios.delete(`http://localhost:3001/tasks/${id}`);\n            const updatedTodos = todos.filter(todo => todo.id !== id);\n            setTodos(updatedTodos);\n            filterTasks(updatedTodos, selectedCategory, searchTerm);\n            console.log('Task deleted:', id);\n        } catch (error) {\n            console.error('Error deleting task:', error);\n        }\n    };\n\n    const toggleComplete = async (id) => {\n        try {\n            const updatedTodo = todos.find(todo => todo.id === id);\n            const updatedData = { isCompleted: !updatedTodo.isCompleted };\n            await axios.patch(`http://localhost:3001/tasks/${id}`, updatedData);\n            const updatedTodos = todos.map(todo =>\n                todo.id === id ? { ...todo, isCompleted: !todo.isCompleted } : todo\n            );\n            setTodos(updatedTodos);\n            filterTasks(updatedTodos, selectedCategory, searchTerm);\n            console.log(\"Task complete status updated:\", id);\n        } catch (error) {\n            console.error('Error updating task complete status:', error);\n        }\n    };\n\n    const editTodo = async (id, updatedTask) => {\n        try {\n            // const updatedTodo = todos.find(todo => todo.id === id);\n            const updatedData = { task: updatedTask, isEditing: false };\n            await axios.patch(`http://localhost:3001/tasks/${id}`, updatedData);\n            // const updatedTodos = todos.map(todo =>\n            //     todo.id === id ? { ...todo, isEditing: !todo.isEditing } : todo\n            // );\n            const updatedTodos = todos.map(todo =>\n                todo.id === id ? { ...todo, task: updatedTask } : todo\n            );\n            setTodos(updatedTodos);\n            filterTasks(updatedTodos, selectedCategory, searchTerm);\n            console.log(\"Task is updated:\", id);\n        } catch (error) {\n            console.error('Error updating task', error);\n        }\n    };\n\n    // const filterTasks = (tasks, category, searchTerm) => {\n    //     let filtered = tasks;\n    //     if(category !== 'all') {\n    //         setFilteredTasks(tasks);\n    //     } else {\n    //         const filtered = tasks.filter(todo => todo.category === category);\n    //         setFilteredTasks(filtered)\n    //     }\n    // }\n\n    // const filterTasks = (tasks, category, searchTerm) => {\n    //     let filtered = tasks;\n    //     if (category !== 'all') {\n    //         filtered = filtered.filter((todo) => todo.category === category);\n    //     }\n    //     if (searchTerm.trim() !== '') {\n    //         filtered = filtered.filter((todo)=> todo.task.toLowerCase().includes(searchTerm.toLowerCase()));\n    //     }\n    //     filtered = filtered.sort((a,b) => a.isCompleted - b.isCompleted);\n    //     setFilteredTasks(filtered);\n    // }\n\n    const filterTasks = (tasks, category, searchTerm) => {\n        let filtered = tasks;\n        if (category !== 'Completed') {\n            filtered = filtered.filter((todo) => todo.isCompleted);\n        } else if (category === 'Incompleted') {\n            filtered = filtered.filter((todo) => !todo.isCompleted);\n        }\n        if (searchTerm.trim() !== '') {\n            filtered = filtered.filter((todo)=> todo.task.toLowerCase().includes(searchTerm.toLowerCase()));\n        }\n        filtered = filtered.sort((a,b) => a.isCompleted - b.isCompleted);\n        setFilteredTasks(filtered);\n    }\n\n    const handleCategoryChange = (category) => {\n        setSelectedCategory(category);\n        filterTasks(todos, category, searchTerm);\n    };\n\n    // const filterCompletedTasks = (isCompleted) => {\n    //     return todos.filter(task => task.isCompleted === isCompleted);\n    // }\n\n    // const incompleteTasks = filterCompletedTasks(false);\n    // const completeTasks = filterCompletedTasks(true);\n\n    // useEffect(() => {\n    //     fetchTasks();\n    // }, [addTodo, filterTasks]); \n\n    // const handleSearch = (searchTerm) => {\n    //     if(!searchTerm.trim() === '') {\n    //         setFilteredTasks(todos);\n    //     } else {\n    //         const filtered = todos.filter((todo) => todo.task.toLowerCase().includes(searchTerm.toLowerCase()));\n    //         setFilteredTasks(filtered);\n    //     }\n    // }\n\n    const handleSearch = (term) => {\n        setSearchTerm(term);\n        filterTasks(todos, selectedCategory, term);\n    };\n\n    // const handleActiveFilterClick = () => {\n    //     setActiveFilter(true);\n    //     filterTasks(incompleteTasks, selectedCategory, searchTerm, true)\n    // };\n\n    // const handleDoneFilterClick = () => {\n    //     setActiveFilter(false);\n    //     filterTasks(completeTasks, selectedCategory, searchTerm, false)\n    // };\n\n    const countCompletedTasks = (todos) => {\n        const completedTasks = todos.filter(task => task.isCompleted === true);\n        // console.log(completedTasks);\n        return completedTasks.length;\n    };\n    \n    const countIncompleteTasks = (todos) => {\n        const incompleteTasks = todos.filter(task => task.isCompleted === false);\n        // console.log(incompleteTasks);\n        return incompleteTasks.length;\n    };\n    \n    const completedCount = countCompletedTasks(todos);\n    const incompleteCount = countIncompleteTasks(todos);\n    \n    console.log('Completed tasks:', completedCount);\n    console.log('Incomplete tasks:', incompleteCount);\n    \n\n// addTodo={addTodo} \n    return (\n        <>\n        {/* <div className=\"filter-buttons\">\n            <button type=\"button\" id=\"active-btn\" className={`filter-button ${activeFilter ? 'active' : ''}`} onClick={handleActiveFilterClick}>Active</button>\n            <button type=\"button\" id=\"done-btn\" className={`filter-button ${!activeFilter ? 'active' : ''}`} onClick={handleDoneFilterClick}>Done</button>                    \n        </div>         */}\n        <div className=\"TodoWrapper\">\n            <div id=\"titleContainer\">\n                <h3 className=\"title\">To Do List</h3>\n                <button type=\"button\" className=\"todo-btn\" onClick={openTaskModal}><FontAwesomeIcon icon={faPlus} size=\"2xl\" style={{color: \"#524444\"}} /></button>\n\n            </div>\n\n            {/* <div id=\"taskCountBox\">\n                <p id=\"completdCount\">{completedCount} tasks done</p>\n                <p id=\"incompletedCount\">{incompleteCount} tasks left</p>                \n            </div>   */}\n            <div id=\"filterContainer\">\n                <Search handleSearch={handleSearch} />\n                {/* <TodoForm selectedCategory={selectedCategory} handleCategoryChange={handleCategoryChange} setSearchTerm={setSearchTerm} className=\"category-filter\"/>   */}\n                <div class=\"select-wrapper\"> \n                    <select id=\"categoryFilter\" className=\"category-filter\" value={selectedCategory}  setSearchTerm={setSearchTerm} onChange={(e) => handleCategoryChange(e.target.value)}>\n                        <option value=\"incompleted\">Incompleted</option>\n                        <option value=\"completed\">Completed</option>\n                    </select>\n                    {/* <select id=\"categoryFilter\" className=\"category-filter\" value={selectedCategory}  setSearchTerm={setSearchTerm} onChange={(e) => handleCategoryChange(e.target.value)} >\n                        <option value=\"all\">All</option>\n                        <option value=\"daily\">Daily</option>\n                        <option value=\"work\">Work</option>\n                        <option value=\"study\">Study</option>\n                        <option value=\"home\">Home</option>\n                        <option value=\"health\">Health</option>\n                        <option value=\"fitness\">Fitness</option>\n                        <option value=\"priority\">Priority</option>               \n                    </select>         */}\n                </div>    \n            </div>\n        \n            <div id=\"todoContainer\">\n                {filteredTasks.map((task) => (\n                    <Todo\n                        task={task}\n                        key={task.id}\n                        toggleComplete={toggleComplete}\n                        deleteTodo={deleteTodo}\n                        editTodo={editTodo}\n                        searchTerm={searchTerm}\n                    />\n                ))}\n\n            <div id=\"taskCountBox\">\n                <p id=\"incompletedCount\">{incompleteCount} tasks left</p>                \n                <p id=\"completedCount\">{completedCount} tasks completed</p>\n            </div>   \n            </div>\n        </div>\n        {isTaskModalOpen && <TaskModal addTask={addTask} closeModal={closeTaskModal} />}\n        {isEditTaskModalOpen && <EditTaskModal addTask={addTask} closeModal={closeEditTaskModal} />}\n        </>\n    );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}