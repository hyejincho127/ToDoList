{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { TaskModal } from '../Task/TaskModal';\nimport { EditTaskModal } from '../Task/EditTaskModal';\n// export const TodoForm = ({addTodo}) => {\n//     const [task, setTask] = useState(\"\")\n\n// const addTask = async (e) => {\n//     e.preventDefault();\n//     try {\n//         const response = await axios.post('http://localhost:3001/tasks',{ task });\n//         console.log('New task added:', response.data);\n//         addTodo(task);   \n//         setTask(\"\")      \n\n//     } catch (error) {\n//         console.log('Error adding task:', error);\n//     }\n//     // console.log(value)\n// }\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TodoForm = ({\n  addTodo,\n  selectedCategory,\n  handleCategoryChange\n}) => {\n  _s();\n  const [task, setTask] = useState('');\n  // const [isModalOpen, setIsModalOpen] = useState(false);\n  // const [selectedCategory, setSelectedCategory] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (task) {\n      addTodo(task);\n    }\n    setTask('');\n  };\n\n  // const openModal = () => {\n  //     setIsModalOpen(true);\n  //     // const modal = document.querySelector('.TaskModalContainer');\n  //     // modal.classList.add('opened'); // 모달이 닫힐 때 '.closed' 클래스 추가\n  //     // console.log(\"Modal is opened\"); \n  // }\n\n  // const closeModal = () => {\n  //     setIsModalOpen(false);\n  //     // const modal = document.querySelector('.TaskModalContainer');\n  //     // modal.classList.add('closed'); // 모달이 닫힐 때 '.closed' 클래스 추가\n  //     // console.log(\"Modal is closed\");\n  // }\n\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const openEditModal = () => {\n    setIsEditModalOpen(true);\n  };\n  const closeEditModal = () => {\n    setIsEditModalOpen(false);\n  };\n\n  // const handleCategoryChange = (e) => {\n  //     setSelectedCategory(e.target.value);\n  //     filterTasks(e.target.value);\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(TodoForm, \"5qjoxS/2SjyQZG4OBaWAD70/h9I=\");\n_c = TodoForm;\nvar _c;\n$RefreshReg$(_c, \"TodoForm\");","map":{"version":3,"names":["React","useState","axios","FontAwesomeIcon","faPlus","TaskModal","EditTaskModal","Fragment","_Fragment","jsxDEV","_jsxDEV","TodoForm","addTodo","selectedCategory","handleCategoryChange","_s","task","setTask","handleSubmit","e","preventDefault","isEditModalOpen","setIsEditModalOpen","openEditModal","closeEditModal","_c","$RefreshReg$"],"sources":["/Users/hyejincho/Developer/Projects/ToDoList/src/components/Todo/TodoForm.js"],"sourcesContent":["import React, { useState } from 'react'\nimport axios from 'axios'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\nimport { TaskModal } from '../Task/TaskModal'\nimport { EditTaskModal } from '../Task/EditTaskModal'\n// export const TodoForm = ({addTodo}) => {\n//     const [task, setTask] = useState(\"\")\n    \n    // const addTask = async (e) => {\n    //     e.preventDefault();\n    //     try {\n    //         const response = await axios.post('http://localhost:3001/tasks',{ task });\n    //         console.log('New task added:', response.data);\n    //         addTodo(task);   \n    //         setTask(\"\")      \n\n    //     } catch (error) {\n    //         console.log('Error adding task:', error);\n    //     }\n    //     // console.log(value)\n    // }\n    \nexport const TodoForm = ({addTodo, selectedCategory, handleCategoryChange}) => {\n    const [task, setTask] = useState('');\n    // const [isModalOpen, setIsModalOpen] = useState(false);\n    // const [selectedCategory, setSelectedCategory] = useState('');\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if(task) {\n            addTodo(task);\n        }\n        setTask('');\n    }\n\n    // const openModal = () => {\n    //     setIsModalOpen(true);\n    //     // const modal = document.querySelector('.TaskModalContainer');\n    //     // modal.classList.add('opened'); // 모달이 닫힐 때 '.closed' 클래스 추가\n    //     // console.log(\"Modal is opened\"); \n    // }\n\n    // const closeModal = () => {\n    //     setIsModalOpen(false);\n    //     // const modal = document.querySelector('.TaskModalContainer');\n    //     // modal.classList.add('closed'); // 모달이 닫힐 때 '.closed' 클래스 추가\n    //     // console.log(\"Modal is closed\");\n    // }\n\n    const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n\n    const openEditModal = () => {\n        setIsEditModalOpen(true);\n    };\n\n    const closeEditModal = () => {\n        setIsEditModalOpen(false);\n    };\n\n    // const handleCategoryChange = (e) => {\n    //     setSelectedCategory(e.target.value);\n    //     filterTasks(e.target.value);\n    // }\n\n    return (\n        <>\n            \n            {/* <form className=\"TodoForm\" onSubmit={handleSubmit}> */}\n                {/* <input type=\"text\" className=\"task-input\" value={task} placeholder=\"What is your task today?\" required autoFocus maxLength=\"25\" onChange={\n                    (e) => setTask(e.target.value)\n                    // console.log(e.target.value)\n                } \n                /> */}\n                \n            {/* <button type=\"button\" className=\"todo-btn\"><FontAwesomeIcon icon={faPlus} size=\"2xl\" style={{color: \"#ffffff\"}} onClick={openModal}/></button>           */}\n            {/* <TaskModal isOpen={isModalOpen} openModal={openModal} closeModal={closeModal} />  */}\n            {/* </form> */}\n            {/* <select id=\"categoryFilter\" value={selectedCategory} onChange={(e) => handleCategoryChange(e.target.value)} >\n                <option value=\"all\">All</option>\n                <option value=\"completed\">Completed</option>\n                <option value=\"incompleted\">Incompleted</option>\n                <option value=\"daily\">Daily</option>\n                <option value=\"work\">Work</option>\n                <option value=\"study\">Study</option>\n                <option value=\"home\">Home</option>\n                <option value=\"health\">Health</option>\n                <option value=\"fitness\">Fitness</option>\n                <option value=\"priority\">Priority</option>\n                <option value=\"important\">Important</option>\n            </select>     */}\n        </>\n    )\n}"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,MAAM,QAAQ,mCAAmC;AAC1D,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,SAASC,aAAa,QAAQ,uBAAuB;AACrD;AACA;;AAEI;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AAEJ,OAAO,MAAMC,QAAQ,GAAGA,CAAC;EAACC,OAAO;EAAEC,gBAAgB;EAAEC;AAAoB,CAAC,KAAK;EAAAC,EAAA;EAC3E,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACpC;EACA;;EAEA,MAAMiB,YAAY,GAAIC,CAAC,IAAK;IACxBA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAGJ,IAAI,EAAE;MACLJ,OAAO,CAACI,IAAI,CAAC;IACjB;IACAC,OAAO,CAAC,EAAE,CAAC;EACf,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAM,CAACI,eAAe,EAAEC,kBAAkB,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EAE7D,MAAMsB,aAAa,GAAGA,CAAA,KAAM;IACxBD,kBAAkB,CAAC,IAAI,CAAC;EAC5B,CAAC;EAED,MAAME,cAAc,GAAGA,CAAA,KAAM;IACzBF,kBAAkB,CAAC,KAAK,CAAC;EAC7B,CAAC;;EAED;EACA;EACA;EACA;;EAEA,oBACIZ,OAAA,CAAAF,SAAA,mBAyBE,CAAC;AAEX,CAAC;AAAAO,EAAA,CAvEYJ,QAAQ;AAAAc,EAAA,GAARd,QAAQ;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}