{"ast":null,"code":"var _jsxFileName = \"/Users/hyejincho/Developer/Projects/ToDoList/src/components/Todo/TodoWrapper.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Select, { components } from 'react-select';\nimport { Todo } from './Todo';\nimport { TodoForm } from './TodoForm';\nimport { Search } from './Search';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { FaCaretDown } from 'react-icons/fa';\nimport { TaskModal } from '../Task/TaskModal';\nimport { EditTaskModal } from '../Task/EditTaskModal';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const TodoWrapper = () => {\n  _s();\n  const [todos, setTodos] = useState([]);\n  const [filteredTasks, setFilteredTasks] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isTaskModalOpen, setIsTaskModalOpen] = useState(false);\n  const [isEditTaskModalOpen, setIsEditTaskModalOpen] = useState(false);\n  const [activeFilter, setActiveFilter] = useState(true);\n  const options = [{\n    value: 'all',\n    label: 'All'\n  }, {\n    value: 'completed',\n    label: 'Completed'\n  }, {\n    value: 'incompleted',\n    label: 'Incompleted'\n  }];\n  const DropdownIndicator = props => {\n    return /*#__PURE__*/_jsxDEV(components.DropdownIndicator, {\n      ...selectedCategory,\n      children: /*#__PURE__*/_jsxDEV(FaCaretDown, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this);\n  };\n  const addTask = newTask => {\n    // setTodos([...todos, newTask])\n    setTodos(prevTodos => [...prevTodos, newTask]);\n  };\n  useEffect(() => {\n    if (isTaskModalOpen && isEditTaskModalOpen) {\n      setIsEditTaskModalOpen(false);\n    }\n  }, [isTaskModalOpen]);\n  useEffect(() => {\n    if (isEditTaskModalOpen && isTaskModalOpen) {\n      setIsTaskModalOpen(false);\n    }\n  }, [isEditTaskModalOpen]);\n  const openTaskModal = () => {\n    setIsTaskModalOpen(true);\n    setIsEditTaskModalOpen(false);\n  };\n  const closeTaskModal = () => {\n    setIsTaskModalOpen(false);\n  };\n  const openEditTaskModal = () => {\n    setIsEditTaskModalOpen(true);\n  };\n  const closeEditTaskModal = () => {\n    setIsEditTaskModalOpen(false);\n  };\n\n  // 할 일을 서버에서 가져오는 함수\n  const fetchTasks = async () => {\n    try {\n      const response = await axios.get('http://localhost:3001/tasks');\n      const tasks = response.data;\n      console.log(tasks);\n      setTodos(tasks);\n      filterTasks(tasks, selectedCategory, searchTerm);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n  const deleteTodo = async id => {\n    try {\n      await axios.delete(`http://localhost:3001/tasks/${id}`);\n      const updatedTodos = todos.filter(todo => todo.id !== id);\n      setTodos(updatedTodos);\n      filterTasks(updatedTodos, selectedCategory, searchTerm);\n      console.log('Task deleted:', id);\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n  const toggleComplete = async id => {\n    try {\n      const updatedTodo = todos.find(todo => todo.id === id);\n      const updatedData = {\n        isCompleted: !updatedTodo.isCompleted\n      };\n      await axios.patch(`http://localhost:3001/tasks/${id}`, updatedData);\n      const updatedTodos = todos.map(todo => todo.id === id ? {\n        ...todo,\n        isCompleted: !todo.isCompleted\n      } : todo);\n      setTodos(updatedTodos);\n      filterTasks(updatedTodos, selectedCategory, searchTerm);\n      console.log(\"Task complete status updated:\", id);\n    } catch (error) {\n      console.error('Error updating task complete status:', error);\n    }\n  };\n  const editTodo = async (id, updatedTask) => {\n    try {\n      // const updatedTodo = todos.find(todo => todo.id === id);\n      const updatedData = {\n        task: updatedTask,\n        isEditing: false\n      };\n      await axios.patch(`http://localhost:3001/tasks/${id}`, updatedData);\n      // const updatedTodos = todos.map(todo =>\n      //     todo.id === id ? { ...todo, isEditing: !todo.isEditing } : todo\n      // );\n      const updatedTodos = todos.map(todo => todo.id === id ? {\n        ...todo,\n        task: updatedTask\n      } : todo);\n      setTodos(updatedTodos);\n      filterTasks(updatedTodos, selectedCategory, searchTerm);\n      console.log(\"Task is updated:\", id);\n    } catch (error) {\n      console.error('Error updating task', error);\n    }\n  };\n  const filterTasks = (tasks, category, searchTerm) => {\n    let filtered = tasks;\n\n    // 카테고리(완료/미완료) 항목 필터링\n    if (category !== 'all') {\n      if (category === 'completed') {\n        filtered = filtered.filter(todo => todo.isCompleted);\n      } else if (category === 'incompleted') {\n        filtered = filtered.filter(todo => !todo.isCompleted);\n      } else {\n        filtered = filtered.filter(todo => todo.category === category);\n      }\n    }\n\n    // 검색어 필터링\n    if (searchTerm.trim() !== '') {\n      filtered = filtered.filter(todo => todo.task.toLowerCase().includes(searchTerm.toLowerCase()));\n    }\n    // 완료 된 할 일 항목 아래로 정렬\n    filtered = filtered.sort((a, b) => a.isCompleted - b.isCompleted);\n    setFilteredTasks(filtered);\n  };\n  const selectCustomStyles = {\n    control: (provided, state) => ({\n      ...provided,\n      backgroundColor: '#FFF',\n      // 셀렉트 박스 배경색\n      border: '1px solid #ccc',\n      height: '3.3vh',\n      fontSize: '0.9rem',\n      textAlign: 'center'\n    }),\n    menu: (provided, state) => ({\n      ...provided,\n      backgroundColor: '#FFF' // 드롭다운 메뉴 배경색\n    }),\n    option: (provided, state) => ({\n      ...provided,\n      color: '#333',\n      // 옵션 텍스트 색상\n      backgroundColor: state.isSelected ? '#f0f0f0' : '#FFF',\n      // 선택된 옵션과 호버된 옵션의 배경색\n      '&:hover': {\n        backgroundColor: '#f0f0f0' // 옵션 호버 배경색\n      }\n    }),\n    dropdownIndicator: (provided, state) => ({\n      ...provided,\n      color: '#333' // 드롭다운 아이콘 색상\n    })\n  };\n  const handleCategoryChange = category => {\n    setSelectedCategory(category);\n    setActiveFilter(category === 'incompleted');\n    filterTasks(todos, category, searchTerm);\n  };\n  const handleSearch = term => {\n    setSearchTerm(term);\n    filterTasks(todos, selectedCategory, term);\n  };\n\n  // const handleActiveFilterClick = () => {\n  //     setActiveFilter(true);\n  //     filterTasks(incompleteTasks, selectedCategory, searchTerm, true)\n  // };\n\n  // const handleDoneFilterClick = () => {\n  //     setActiveFilter(false);\n  //     filterTasks(completeTasks, selectedCategory, searchTerm, false)\n  // };\n\n  const countCompletedTasks = todos => {\n    const completedTasks = todos.filter(task => task.isCompleted === true);\n    // console.log(completedTasks);\n    return completedTasks.length;\n  };\n  const countIncompleteTasks = todos => {\n    const incompleteTasks = todos.filter(task => task.isCompleted === false);\n    // console.log(incompleteTasks);\n    return incompleteTasks.length;\n  };\n  const completedCount = countCompletedTasks(todos);\n  const incompleteCount = countIncompleteTasks(todos);\n  console.log('Completed tasks:', completedCount);\n  console.log('Incomplete tasks:', incompleteCount);\n\n  // addTodo={addTodo} \n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"TodoWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"titleContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"title\",\n          children: \"To Do List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"todo-btn\",\n          onClick: openTaskModal,\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faPlus,\n            size: \"2xl\",\n            style: {\n              color: \"#524444\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 84\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"filterContainer\",\n        children: [/*#__PURE__*/_jsxDEV(Search, {\n          handleSearch: handleSearch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"select-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(Select, {\n            id: \"categoryFilter\",\n            className: \"category-filter\",\n            options: options\n            // value={options.find(option => option.value === selectedCategory)}\n            ,\n            value: options.find(option => option.value === selectedCategory),\n            onChange: selectedOption => handleCategoryChange(selectedOption.value),\n            placeholder: `Select category: ${selectedCategory === '' ? 'All' : selectedCategory}`,\n            components: {\n              DropdownIndicator\n            },\n            styles: selectCustomStyles\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"selected-value\",\n            children: selectedCategory\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"todoContainer\",\n        children: [filteredTasks.map(task => /*#__PURE__*/_jsxDEV(Todo, {\n          task: task,\n          toggleComplete: toggleComplete,\n          deleteTodo: deleteTodo,\n          editTodo: editTodo,\n          searchTerm: searchTerm\n        }, task.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 21\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"taskCountBox\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            id: \"incompletedCount\",\n            children: [incompleteCount, \" tasks left\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            id: \"completedCount\",\n            children: [completedCount, \" tasks completed\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }, this), isTaskModalOpen && /*#__PURE__*/_jsxDEV(TaskModal, {\n      addTask: addTask,\n      closeModal: closeTaskModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 29\n    }, this), isEditTaskModalOpen && /*#__PURE__*/_jsxDEV(EditTaskModal, {\n      addTask: addTask,\n      closeModal: closeEditTaskModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true);\n};\n_s(TodoWrapper, \"pzxU40YhWYkiDDWCnh1gayesJ0A=\");\n_c = TodoWrapper;\nvar _c;\n$RefreshReg$(_c, \"TodoWrapper\");","map":{"version":3,"names":["React","useState","useEffect","axios","Select","components","Todo","TodoForm","Search","FontAwesomeIcon","faPlus","FaCaretDown","TaskModal","EditTaskModal","jsxDEV","_jsxDEV","Fragment","_Fragment","TodoWrapper","_s","todos","setTodos","filteredTasks","setFilteredTasks","selectedCategory","setSelectedCategory","searchTerm","setSearchTerm","isTaskModalOpen","setIsTaskModalOpen","isEditTaskModalOpen","setIsEditTaskModalOpen","activeFilter","setActiveFilter","options","value","label","DropdownIndicator","props","children","fileName","_jsxFileName","lineNumber","columnNumber","addTask","newTask","prevTodos","openTaskModal","closeTaskModal","openEditTaskModal","closeEditTaskModal","fetchTasks","response","get","tasks","data","console","log","filterTasks","error","deleteTodo","id","delete","updatedTodos","filter","todo","toggleComplete","updatedTodo","find","updatedData","isCompleted","patch","map","editTodo","updatedTask","task","isEditing","category","filtered","trim","toLowerCase","includes","sort","a","b","selectCustomStyles","control","provided","state","backgroundColor","border","height","fontSize","textAlign","menu","option","color","isSelected","dropdownIndicator","handleCategoryChange","handleSearch","term","countCompletedTasks","completedTasks","length","countIncompleteTasks","incompleteTasks","completedCount","incompleteCount","className","type","onClick","icon","size","style","class","onChange","selectedOption","placeholder","styles","closeModal","_c","$RefreshReg$"],"sources":["/Users/hyejincho/Developer/Projects/ToDoList/src/components/Todo/TodoWrapper.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Select, { components } from 'react-select';\nimport { Todo } from './Todo';\nimport { TodoForm } from './TodoForm';\nimport { Search } from './Search';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { FaCaretDown } from 'react-icons/fa'; \nimport { TaskModal } from '../Task/TaskModal';\nimport { EditTaskModal } from '../Task/EditTaskModal';\n\nexport const TodoWrapper = () => {\n    const [todos, setTodos] = useState([]);\n    const [filteredTasks, setFilteredTasks] = useState([]);\n    const [selectedCategory, setSelectedCategory] = useState('all');\n    const [searchTerm, setSearchTerm] = useState('');\n    const [isTaskModalOpen, setIsTaskModalOpen] = useState(false);\n    const [isEditTaskModalOpen, setIsEditTaskModalOpen] = useState(false);\n    const [activeFilter, setActiveFilter] = useState(true);\n\n    const options = [\n        { value: 'all', label: 'All' },\n        { value: 'completed', label: 'Completed'},\n        { value: 'incompleted', label: 'Incompleted'},\n    ]\n\n    const DropdownIndicator = (props) => {\n        return (\n            <components.DropdownIndicator {...selectedCategory} >\n                {/* {...props} */}\n                <FaCaretDown />\n            </components.DropdownIndicator>\n        );\n    };\n\n    const addTask = (newTask) => {\n        // setTodos([...todos, newTask])\n        setTodos((prevTodos) => [...prevTodos, newTask]);\n    }\n\n    useEffect(() => {\n        if (isTaskModalOpen && isEditTaskModalOpen) {\n            setIsEditTaskModalOpen(false);\n        }\n    }, [isTaskModalOpen]);\n\n    useEffect(() => {\n        if (isEditTaskModalOpen && isTaskModalOpen) {\n            setIsTaskModalOpen(false);\n        }\n    }, [isEditTaskModalOpen]);\n\n\n    const openTaskModal = () => {\n        setIsTaskModalOpen(true);\n        setIsEditTaskModalOpen(false);\n    };\n\n    const closeTaskModal = () => {\n        setIsTaskModalOpen(false);\n    };\n\n    const openEditTaskModal = () => {\n        setIsEditTaskModalOpen(true);\n    };\n\n    const closeEditTaskModal = () => {\n        setIsEditTaskModalOpen(false);\n    };\n\n    // 할 일을 서버에서 가져오는 함수\n    const fetchTasks = async () => {\n        try {\n            const response = await axios.get('http://localhost:3001/tasks');\n            const tasks = response.data;\n            console.log(tasks)\n            setTodos(tasks);\n            filterTasks(tasks, selectedCategory, searchTerm);\n        } catch (error) {\n            console.error('Error fetching tasks:', error);\n        }\n    };\n\n    useEffect(() => {\n        fetchTasks();\n    }, []);\n\n    const deleteTodo = async (id) => {\n        try {\n            await axios.delete(`http://localhost:3001/tasks/${id}`);\n            const updatedTodos = todos.filter(todo => todo.id !== id);\n            setTodos(updatedTodos);\n            filterTasks(updatedTodos, selectedCategory, searchTerm);\n            console.log('Task deleted:', id);\n        } catch (error) {\n            console.error('Error deleting task:', error);\n        }\n    };\n\n    const toggleComplete = async (id) => {\n        try {\n            const updatedTodo = todos.find(todo => todo.id === id);\n            const updatedData = { isCompleted: !updatedTodo.isCompleted };\n            await axios.patch(`http://localhost:3001/tasks/${id}`, updatedData);\n            const updatedTodos = todos.map(todo =>\n                todo.id === id ? { ...todo, isCompleted: !todo.isCompleted } : todo\n            );\n            setTodos(updatedTodos);\n            filterTasks(updatedTodos, selectedCategory, searchTerm);\n            console.log(\"Task complete status updated:\", id);\n        } catch (error) {\n            console.error('Error updating task complete status:', error);\n        }\n    };\n\n    const editTodo = async (id, updatedTask) => {\n        try {\n            // const updatedTodo = todos.find(todo => todo.id === id);\n            const updatedData = { task: updatedTask, isEditing: false };\n            await axios.patch(`http://localhost:3001/tasks/${id}`, updatedData);\n            // const updatedTodos = todos.map(todo =>\n            //     todo.id === id ? { ...todo, isEditing: !todo.isEditing } : todo\n            // );\n            const updatedTodos = todos.map(todo =>\n                todo.id === id ? { ...todo, task: updatedTask } : todo\n            );\n            setTodos(updatedTodos);\n            filterTasks(updatedTodos, selectedCategory, searchTerm);\n            console.log(\"Task is updated:\", id);\n        } catch (error) {\n            console.error('Error updating task', error);\n        }\n    };\n\n    const filterTasks = (tasks, category, searchTerm) => {\n        let filtered = tasks;\n\n        // 카테고리(완료/미완료) 항목 필터링\n        if (category !== 'all') {\n            if (category === 'completed') {\n                filtered = filtered.filter((todo) => todo.isCompleted);\n            } else if (category === 'incompleted') {\n                filtered = filtered.filter((todo) => !todo.isCompleted);\n            } else {\n                filtered = filtered.filter((todo) => todo.category === category);\n            } \n        }\n\n        // 검색어 필터링\n        if (searchTerm.trim() !== '') {\n            filtered = filtered.filter((todo)=> todo.task.toLowerCase().includes(searchTerm.toLowerCase()));\n        }\n        // 완료 된 할 일 항목 아래로 정렬\n        filtered = filtered.sort((a,b) => a.isCompleted - b.isCompleted);\n        setFilteredTasks(filtered);\n    }\n\n    const selectCustomStyles = {\n        control: (provided, state) => ({\n          ...provided,\n          backgroundColor: '#FFF', // 셀렉트 박스 배경색\n          border: '1px solid #ccc',\n          height: '3.3vh',\n          fontSize: '0.9rem',\n          textAlign: 'center'\n        }),\n        menu: (provided, state) => ({\n          ...provided,\n          backgroundColor: '#FFF' // 드롭다운 메뉴 배경색\n        }),\n        option: (provided, state) => ({\n          ...provided,\n          color: '#333', // 옵션 텍스트 색상\n          backgroundColor: state.isSelected ? '#f0f0f0' : '#FFF', // 선택된 옵션과 호버된 옵션의 배경색\n          '&:hover': {\n            backgroundColor: '#f0f0f0' // 옵션 호버 배경색\n          }\n        }),\n        dropdownIndicator: (provided, state) => ({\n          ...provided,\n          color: '#333' // 드롭다운 아이콘 색상\n        })\n      };\n\n    const handleCategoryChange = (category) => {\n        setSelectedCategory(category);\n        setActiveFilter(category === 'incompleted');\n        filterTasks(todos, category, searchTerm);\n    };\n\n    const handleSearch = (term) => {\n        setSearchTerm(term);\n        filterTasks(todos, selectedCategory, term);\n    };\n\n    // const handleActiveFilterClick = () => {\n    //     setActiveFilter(true);\n    //     filterTasks(incompleteTasks, selectedCategory, searchTerm, true)\n    // };\n\n    // const handleDoneFilterClick = () => {\n    //     setActiveFilter(false);\n    //     filterTasks(completeTasks, selectedCategory, searchTerm, false)\n    // };\n\n    const countCompletedTasks = (todos) => {\n        const completedTasks = todos.filter(task => task.isCompleted === true);\n        // console.log(completedTasks);\n        return completedTasks.length;\n    };\n    \n    const countIncompleteTasks = (todos) => {\n        const incompleteTasks = todos.filter(task => task.isCompleted === false);\n        // console.log(incompleteTasks);\n        return incompleteTasks.length;\n    };\n    \n    const completedCount = countCompletedTasks(todos);\n    const incompleteCount = countIncompleteTasks(todos);\n    \n    console.log('Completed tasks:', completedCount);\n    console.log('Incomplete tasks:', incompleteCount);\n    \n// addTodo={addTodo} \n    return (\n        <>\n        {/* <div className=\"filter-buttons\">\n            <button type=\"button\" id=\"active-btn\" className={`filter-button ${activeFilter ? 'active' : ''}`} onClick={handleActiveFilterClick}>Active</button>\n            <button type=\"button\" id=\"done-btn\" className={`filter-button ${!activeFilter ? 'active' : ''}`} onClick={handleDoneFilterClick}>Done</button>                    \n        </div>         */}\n        <div className=\"TodoWrapper\">\n            <div id=\"titleContainer\">\n                <h3 className=\"title\">To Do List</h3>\n                <button type=\"button\" className=\"todo-btn\" onClick={openTaskModal}><FontAwesomeIcon icon={faPlus} size=\"2xl\" style={{color: \"#524444\"}} /></button>\n\n            </div>\n\n            {/* <div id=\"taskCountBox\">\n                <p id=\"completdCount\">{completedCount} tasks done</p>\n                <p id=\"incompletedCount\">{incompleteCount} tasks left</p>                \n            </div>   */}\n            <div id=\"filterContainer\">\n                <Search handleSearch={handleSearch} />\n                {/* <TodoForm selectedCategory={selectedCategory} handleCategoryChange={handleCategoryChange} setSearchTerm={setSearchTerm} className=\"category-filter\"/>   */}\n                <div class=\"select-wrapper\"> \n                        <Select\n                            id=\"categoryFilter\"\n                            className=\"category-filter\"\n                            options={options}\n                            // value={options.find(option => option.value === selectedCategory)}\n                            value={options.find(option => option.value === selectedCategory)}\n                            onChange={(selectedOption) => handleCategoryChange(selectedOption.value)}\n                            placeholder={`Select category: ${selectedCategory === '' ? 'All' : selectedCategory}`} \n                            components={{\n                                DropdownIndicator}} styles={selectCustomStyles}   \n                        />\n                        <div className=\"selected-value\">{selectedCategory}</div>\n                    {/* <select id=\"categoryFilter\" className=\"category-filter\" value={selectedCategory}  setSearchTerm={setSearchTerm} onChange={(e) => handleCategoryChange(e.target.value)} >\n                        <option value=\"all\">All</option>\n                        <option value=\"daily\">Daily</option>\n                        <option value=\"work\">Work</option>\n                        <option value=\"study\">Study</option>\n                        <option value=\"home\">Home</option>\n                        <option value=\"health\">Health</option>\n                        <option value=\"fitness\">Fitness</option>\n                        <option value=\"priority\">Priority</option>               \n                    </select>         */}\n                </div>    \n            </div>\n        \n            <div id=\"todoContainer\">\n                {filteredTasks.map((task) => (\n                    <Todo\n                        task={task}\n                        key={task.id}\n                        toggleComplete={toggleComplete}\n                        deleteTodo={deleteTodo}\n                        editTodo={editTodo}\n                        searchTerm={searchTerm}\n                    />\n                ))}\n\n            <div id=\"taskCountBox\">\n                <p id=\"incompletedCount\">{incompleteCount} tasks left</p>                \n                <p id=\"completedCount\">{completedCount} tasks completed</p>\n            </div>   \n            </div>\n        </div>\n        {isTaskModalOpen && <TaskModal addTask={addTask} closeModal={closeTaskModal} />}\n        {isEditTaskModalOpen && <EditTaskModal addTask={addTask} closeModal={closeEditTaskModal} />}\n        </>\n    );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}